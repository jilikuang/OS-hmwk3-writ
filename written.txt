1. (4.2)
No threads, some threads, or all the threads may print along with “Main thread done.” printed by the main thread. The main idea is that the main thread will not wait for the other threads done since thread_join was removed. In that case, the main thread could exit directly in its turn even though some other threads are not executed yet. When the main thread terminates, the threads created by it will be terminated as well. Therefore, only the threads that is lucky enough to execute before the main thread exits can print.

2. (5.7)
Please refer to tsbbq.cpp.

3. (5.9)
a.
Although there is a protection in acquire(), there is no protection in release(). Therefore, every time release() is invoked, futex_wake() will be invoked, so that the goal of avoiding making expensive system calls is not achieved.

b.
Assuming there are N threads which try to grab the lock at the same time, the first thread will successfully increase val from 0 and grab the lock. The following N-1 threads will fail to increase val from 0, such that the return values are not 0, and then call the system call, futex_wait(). Since the system call is very expensive, involving CPU mode switching and stacking current states, etc, the CPU will have a lot of work to do during kernel/user mode switch. Therefore, a lot of threads invoking the system call at the same time will severely slow down the process and there will be a heavy load of CPU usage.

c.
If release() is invoked without following the semantics, the thread can easily consider it has obtain the lock. For example, if a thread call release() first and then call acquire(), it can easily get the lock, since val can be arbitrarily reset in release().

4. (6.1)
Equivalent case 1: R2 -> R1 -> R3
Equivalent case 2: R1 -> R3 -> R2

5. (6.3)
The minimum number of chopsticks to ensure no deadlocks is n+1. Considering the case with only n chopsticks, the case leading to the deadlock is that each philosopher holds one chopstick and waiting for others. Starting from the circumstance, if one more chopstick is added for them, one of the waiting philosopher can then stop waiting, finish his dining and release his chopsticks. Therefore, with n+1 chopsticks, it can be guaranteed that there will be at least one philosopher who is not waiting for chopsticks when all chopsticks are held, which prevents circular waiting.

6. (6.7)
Replacing with readLock/readUnlock will not work, especially under multi-processor environment. The major reason is that, during the searching in the for loop, insert may be invoked by other threads. That is, when writeLock is obtained to do removal, the list is not the current list. There could be an extreme case that when the item to be removed is the head of the old list. In that case, if an item is inserted between the item to be removed is found and the remove function obtains writeLock, the remove function could still consider as the head the item which it is going to remove, even though the item is not the head anymore in the updated list. Thus, the remove function will publish(&head, current->next), which results in deleting two items, one is the head of the old list and the other is the item just inserted. Therefore this method just not works.
